/**
 * This is template for main module created by New Kinetis SDK 2.x Project Wizard. Enjoy!
 **/

#include "board.h"
#include "pin_mux.h"
#include "clock_config.h"
#include "fsl_ftm.h"

/*******************************************************************************
 * Definitions
 ******************************************************************************/
/* The Flextimer instance/channel used for board */

/* Get source clock for FTM driver */
#define FTM_SOURCE_CLOCK CLOCK_GetFreq(kCLOCK_CoreSysClk)

int main(void) {
  /* Board pin, clock, debug console init */
  BOARD_InitPins();
  BOARD_BootClockRUN();
  BOARD_InitDebugConsole();

  /* Add your code here */
  int i;
  ftm_config_t ftmInfo;
  ftm_chnl_pwm_signal_param_t ftmParam;

  FTM_GetDefaultConfig(&ftmInfo);
  FTM_Init(FTM0, &ftmInfo);
  FTM_Init(FTM1, &ftmInfo);
  FTM_Init(FTM2, &ftmInfo);
  FTM_Init(FTM4, &ftmInfo);

  ftm_chnl_pwm_signal_param_t ftmParams[6]={ftmParam,ftmParam,ftmParam,ftmParam,ftmParam,ftmParam};

  for (i=0;i<6;i++)
  {
	  ftmParams[i].chnlNumber=i;
  }

  FTM_SetupPwm(FTM0, &ftmParams, 6U, kFTM_EdgeAlignedPwm, 2400U, FTM_SOURCE_CLOCK);
  FTM_SetupPwm(FTM1, &ftmParams, 2U, kFTM_EdgeAlignedPwm, 2400U, FTM_SOURCE_CLOCK);
  FTM_SetupPwm(FTM2, &ftmParams, 2U, kFTM_EdgeAlignedPwm, 2400U, FTM_SOURCE_CLOCK);
  FTM_SetupPwm(FTM4, &ftmParams, 2U, kFTM_EdgeAlignedPwm, 2400U, FTM_SOURCE_CLOCK);

  FTM_StartTimer(FTM0, kFTM_SystemClock);
  FTM_StartTimer(FTM1, kFTM_SystemClock);
  FTM_StartTimer(FTM2, kFTM_SystemClock);
  FTM_StartTimer(FTM4, kFTM_SystemClock);
  for (i=0;i<6;i++)
  {
	  FTM_UpdateChnlEdgeLevelSelect(FTM0, i, kFTM_HighTrue); //Should be able to do this during FTM initialization
	  FTM0->CONTROLS[i].CnV = 0;
  }
  for (i=0;i<2;i++)
  {
	  FTM_UpdateChnlEdgeLevelSelect(FTM1, i, kFTM_HighTrue); //Should be able to do this during FTM initialization
	  FTM1->CONTROLS[i].CnV = 0;
	  FTM_UpdateChnlEdgeLevelSelect(FTM2, i, kFTM_HighTrue); //Should be able to do this during FTM initialization
	  FTM2->CONTROLS[i].CnV = 0;
	  FTM_UpdateChnlEdgeLevelSelect(FTM4, i, kFTM_HighTrue); //Should be able to do this during FTM initialization
	  FTM4->CONTROLS[i].CnV = 0;
  }

  FTM_SetSoftwareTrigger(FTM0, true);
  FTM_SetSoftwareTrigger(FTM1, true);
  FTM_SetSoftwareTrigger(FTM2, true);
  FTM_SetSoftwareTrigger(FTM4, true);

  while (1)
  {
      __asm("NOP"); /* something to use as a breakpoint stop while looping */
  }
}
