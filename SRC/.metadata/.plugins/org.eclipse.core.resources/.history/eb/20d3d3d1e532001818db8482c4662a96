/**
 * This is template for main module created by New Kinetis SDK 2.x Project Wizard. Enjoy!
 **/

#include "board.h"
#include "pin_mux.h"
#include "clock_config.h"
#include "fsl_ftm.h"

/*******************************************************************************
 * Definitions
 ******************************************************************************/
/* The Flextimer instance/channel used for board */

/* Get source clock for FTM driver */
#define FTM_SOURCE_CLOCK CLOCK_GetFreq(kCLOCK_CoreSysClk)

FTM_Type * PWM_FTMS[]={BOARD_INITPINS_CH1_DIM_PERIPHERAL, BOARD_INITPINS_CH2_DIM_PERIPHERAL, BOARD_INITPINS_CH3_DIM_PERIPHERAL, BOARD_INITPINS_CH4_DIM_PERIPHERAL, BOARD_INITPINS_CH5_DIM_PERIPHERAL, BOARD_INITPINS_CH6_DIM_PERIPHERAL, BOARD_INITPINS_CH7_DIM_PERIPHERAL, BOARD_INITPINS_CH8_DIM_PERIPHERAL,\
		BOARD_INITPINS_CH9_DIM_PERIPHERAL, BOARD_INITPINS_CH10_DIM_PERIPHERAL, BOARD_INITPINS_CH11_DIM_PERIPHERAL, BOARD_INITPINS_CH12_DIM_PERIPHERAL};

uint8_t PWM_CHANNELS[]={BOARD_INITPINS_CH1_DIM_CHANNEL, BOARD_INITPINS_CH2_DIM_CHANNEL, BOARD_INITPINS_CH3_DIM_CHANNEL, BOARD_INITPINS_CH4_DIM_CHANNEL, BOARD_INITPINS_CH5_DIM_CHANNEL, BOARD_INITPINS_CH6_DIM_CHANNEL, BOARD_INITPINS_CH7_DIM_CHANNEL, BOARD_INITPINS_CH8_DIM_CHANNEL,\
		BOARD_INITPINS_CH9_DIM_CHANNEL, BOARD_INITPINS_CH10_DIM_CHANNEL, BOARD_INITPINS_CH11_DIM_CHANNEL, BOARD_INITPINS_CH12_DIM_CHANNEL};



int main(void) {
  /* Board pin, clock, debug console init */
  BOARD_InitPins();
  BOARD_BootClockRUN();
  BOARD_InitDebugConsole();

  /* Add your code here */
  int i;
  for (i=0;i<1;i++)
  {
	  ftm_config_t ftmInfo;
	  ftm_chnl_pwm_signal_param_t ftmParam;

	  ftmParam.chnlNumber = PWM_CHANNELS[i];
	  ftmParam.level = 1U;
	  ftmParam.dutyCyclePercent = 1U;
	  ftmParam.firstEdgeDelayPercent = 0U;

	  FTM_GetDefaultConfig(&ftmInfo);
	  ftmInfo.chnlPolarity=1U;
	  /* Initialize FTM module */
	  FTM_Init(PWM_FTMS[i], &ftmInfo);
	  FTM_SetupPwm(PWM_FTMS[i], &ftmParam, 1U, kFTM_EdgeAlignedPwm, 2400U, FTM_SOURCE_CLOCK);
	  FTM_StartTimer(PWM_FTMS[i], kFTM_SystemClock);
//	  FTM_UpdateChnlEdgeLevelSelect(PWM_FTMS[i], PWM_CHANNELS[i], kFTM_HighTrue); //Should be able to do this during FTM initialization

//	  PWM_FTMS[i]->CONTROLS[PWM_CHANNELS[i]].CnV = 5;

	  FTM_UpdateChnlEdgeLevelSelect(PWM_FTMS[1], PWM_CHANNELS[1], kFTM_HighTrue); //Should be able to do this during FTM initialization
	  PWM_FTMS[i]->CONTROLS[PWM_CHANNELS[1]].CnV = 500;
	  FTM_UpdateChnlEdgeLevelSelect(PWM_FTMS[0], PWM_CHANNELS[0], kFTM_HighTrue); //Should be able to do this during FTM initialization
	  PWM_FTMS[i]->CONTROLS[PWM_CHANNELS[0]].CnV = 500;
	  FTM_SetSoftwareTrigger(PWM_FTMS[0], true);
  }

FTM_SetSoftwareTrigger(PWM_FTMS[0], true);

  while (1)
  {
      __asm("NOP"); /* something to use as a breakpoint stop while looping */
  }
}
