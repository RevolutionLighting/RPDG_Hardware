/**
 * This is template for main module created by New Kinetis SDK 2.x Project Wizard. Enjoy!
 **/

#include "board.h"
#include "pin_mux.h"
#include "clock_config.h"
#include "fsl_ftm.h"
#include "fsl_uart.h"

/*******************************************************************************
 * Definitions
 ******************************************************************************/
/* The Flextimer instance/channel used for board */

/* Get source clock for FTM driver */
#define FTM_SOURCE_CLOCK CLOCK_GetFreq(kCLOCK_CoreSysClk)

FTM_Type * dimFtms[12]={BOARD_INITPINS_CH1_DIM_PERIPHERAL, BOARD_INITPINS_CH2_DIM_PERIPHERAL, BOARD_INITPINS_CH3_DIM_PERIPHERAL, BOARD_INITPINS_CH4_DIM_PERIPHERAL, BOARD_INITPINS_CH5_DIM_PERIPHERAL, BOARD_INITPINS_CH6_DIM_PERIPHERAL, BOARD_INITPINS_CH7_DIM_PERIPHERAL,\
		BOARD_INITPINS_CH8_DIM_PERIPHERAL, BOARD_INITPINS_CH9_DIM_PERIPHERAL, BOARD_INITPINS_CH10_DIM_PERIPHERAL, BOARD_INITPINS_CH11_DIM_PERIPHERAL, BOARD_INITPINS_CH12_DIM_PERIPHERAL};

uint8_t dimChs[12]={BOARD_INITPINS_CH1_DIM_CHANNEL, BOARD_INITPINS_CH2_DIM_CHANNEL, BOARD_INITPINS_CH3_DIM_CHANNEL, BOARD_INITPINS_CH4_DIM_CHANNEL, BOARD_INITPINS_CH5_DIM_CHANNEL, BOARD_INITPINS_CH6_DIM_CHANNEL, BOARD_INITPINS_CH7_DIM_CHANNEL,\
		BOARD_INITPINS_CH8_DIM_CHANNEL, BOARD_INITPINS_CH9_DIM_CHANNEL, BOARD_INITPINS_CH10_DIM_CHANNEL, BOARD_INITPINS_CH11_DIM_CHANNEL, BOARD_INITPINS_CH12_DIM_CHANNEL};

void setPwm(uint8_t channel,uint16_t level)
{
  int val=(level*dimFtms[channel]->MOD)/1000;
  dimFtms[channel]->CONTROLS[dimChs[channel]].CnV = val;
  FTM_SetSoftwareTrigger(dimFtms[channel], true);
}

int main(void) {
  /* Board pin, clock, debug console init */
  BOARD_InitPins();
  BOARD_BootClockRUN();
  BOARD_InitDebugConsole();

  /* Add your code here */
  int i;
  ftm_config_t ftmInfo;
  ftm_chnl_pwm_signal_param_t ftmParam;

  FTM_GetDefaultConfig(&ftmInfo);
  FTM_Init(FTM0, &ftmInfo);
  FTM_Init(FTM1, &ftmInfo);
  FTM_Init(FTM2, &ftmInfo);
  FTM_Init(FTM4, &ftmInfo);

  ftm_chnl_pwm_signal_param_t ftmParams[6]={ftmParam,ftmParam,ftmParam,ftmParam,ftmParam,ftmParam};

  for (i=0;i<6;i++)
  {
	  ftmParams[i].chnlNumber=i;
  }

  FTM_SetupPwm(FTM0, &ftmParams, 6U, kFTM_EdgeAlignedPwm, 2400U, FTM_SOURCE_CLOCK);
  FTM_SetupPwm(FTM1, &ftmParams, 2U, kFTM_EdgeAlignedPwm, 2400U, FTM_SOURCE_CLOCK);
  FTM_SetupPwm(FTM2, &ftmParams, 2U, kFTM_EdgeAlignedPwm, 2400U, FTM_SOURCE_CLOCK);
  FTM_SetupPwm(FTM4, &ftmParams, 2U, kFTM_EdgeAlignedPwm, 2400U, FTM_SOURCE_CLOCK);

  FTM_StartTimer(FTM0, kFTM_SystemClock);
  FTM_StartTimer(FTM1, kFTM_SystemClock);
  FTM_StartTimer(FTM2, kFTM_SystemClock);
  FTM_StartTimer(FTM4, kFTM_SystemClock);
  for (i=0;i<6;i++)
  {
	  FTM_UpdateChnlEdgeLevelSelect(FTM0, i, kFTM_HighTrue); //Should be able to do this during FTM initialization
  }
  for (i=0;i<2;i++)
  {
	  FTM_UpdateChnlEdgeLevelSelect(FTM1, i, kFTM_HighTrue); //Should be able to do this during FTM initialization
	  FTM_UpdateChnlEdgeLevelSelect(FTM2, i, kFTM_HighTrue); //Should be able to do this during FTM initialization
	  FTM_UpdateChnlEdgeLevelSelect(FTM4, i, kFTM_HighTrue); //Should be able to do this during FTM initialization
  }

  FTM_SetSoftwareTrigger(FTM0, true);
  FTM_SetSoftwareTrigger(FTM1, true);
  FTM_SetSoftwareTrigger(FTM2, true);
  FTM_SetSoftwareTrigger(FTM4, true);

  for (i=0;i<12;i++)
  {
	  setPwm(i,2);
  }

  uint8_t ch;
  uart_config_t user_config;
  UART_GetDefaultConfig(&user_config);
  user_config.baudRate_Bps = 9600U;
  user_config.enableTx = true;
  user_config.enableRx = true;
  UART_Init(UART0,&user_config,CLOCK_GetCoreSysClkFreq());

  uint8_t index;

  while(1)
  {
      UART_ReadBlocking(UART0, &ch, 1);
      if(ch==0)
      {
    	  index=0;
      }
      else if(ch>4)
      {
    	  if (index<12)x
    	  {
    		  setPwm(index,(ch-5)*4);
    		  index++;
    	  }
      }
      __asm("NOP"); /* something to use as a breakpoint stop while looping */
  }

}
